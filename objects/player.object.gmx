<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_dempsey</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()
hp = 3

image_speed = 0.25

spd = 3

moving = false

//sprite_index = choose(s_dempsey, s_nikolai, s_takeo, s_richtofen)

shoot_cooldown = 0

sprint_max = 360
sprint_juice = sprint_max


current_wep = 0

wep[0] = gun.m1911
wep[1] = gun.none

ammo[0] = 64
ammo[1] = 0

mag[0] = 8
mag[1] = 0

points = 500

reloading = false
sprint_cooldown = false

grid = mp_grid_create(-16,-16,room_width/32, room_height/32, 32, 32)

round_reprieve = 0

max_zombie_pop = 7
zombies_spawned = 0
current_zombie_pop = 0

rounds = 1

mercy_timer = 0
regen = 0
repair_time = 0
total_points = 500
kills = 0

audio_play_sound(dempsey_entrance, 1, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up_key = keyboard_check(ord("W"))
down_key = keyboard_check(ord("S"))
left_key = keyboard_check(ord("A"))
right_key = keyboard_check(ord("D"))
end_key = keyboard_check(vk_escape)
shoot_key = mouse_check_button(mb_left)
reload_key = keyboard_check_pressed(ord("R"))
aim_key = mouse_check_button(mb_right)
sprint_key = keyboard_check(vk_lshift)
use_key = keyboard_check_pressed(ord("E"))
swap_key = keyboard_check_pressed(vk_space)

gun_name = global.gun_index[# wep[current_wep], gun_stat.name]
gun_rof = global.gun_index[# wep[current_wep], gun_stat.rof]
gun_reload = global.gun_index[# wep[current_wep], gun_stat.reload_spd]
gun_mag_size = global.gun_index[# wep[current_wep], gun_stat.mag_size]
gun_sound = global.gun_index[# wep[current_wep], gun_stat.sound]
gun_accuracy = (100-global.gun_index[# wep[current_wep], gun_stat.accuracy])
gun_damage = global.gun_index[# wep[current_wep], gun_stat.damage]
gun_crit = global.gun_index[# wep[current_wep], gun_stat.crit_chance]

if(aim_key and !sprint_key) spd = 1
else if(sprint_key and sprint_juice &gt; 0 and !sprint_cooldown) spd = 5
else spd = 3

if(hp  &gt; 0)
{
    if(right_key and !place_meeting(x+spd,y, wall) and !place_meeting(x+spd,y, door))
    {
        x += spd
        moving = true
    }
    if(left_key and !place_meeting(x-spd,y, wall) and !place_meeting(x-spd,y, door))
    {
        x -= spd
        moving = true
    }
    if(up_key and !place_meeting(x,y-spd, wall) and !place_meeting(x,y-spd, door))
    {
        y -= spd
        moving = true
    }
    if(down_key and !place_meeting(x,y+spd, wall) and !place_meeting(x,y+spd, door))
    {
        y += spd
        moving = true
    }
    
    if(sprint_key and sprint_juice &gt; 0)
    {
        if(moving) sprint_juice -= 3
    }
}

near_door = instance_nearest(x,y,door)

near_chalk = instance_nearest(x,y,chalk_outline)

near_barricade = instance_nearest(x,y,barricade)

if(use_key)
{
    if(point_distance(x,y,near_door.x, near_door.y) &lt; 96)
    {
        if(points &gt;= near_door.cost)
        {
            points -= near_door.cost
            with(instance_create(1675, 900,  point_text)) val = other.near_door.cost * -1
            with(near_door) instance_destroy()
            near_door = instance_nearest(x,y,door)
            audio_play_sound(money_sound, 1, 0)
        }
    }
    if(point_distance(x,y,near_chalk.x,near_chalk.y) &lt; 96)
    {
        if(points &gt;= near_chalk.cost)
        {
            points -= near_chalk.cost
            audio_play_sound(money_sound, 1, 0)
            with(instance_create(1675, 900,  point_text)) val = other.near_chalk.cost * -1
            if(wep[1] = gun.none)
            {
                wep[1] = near_chalk.gid
                ammo[1] = global.gun_index[# near_chalk.gid, gun_stat.max_ammo]
                mag[1] = global.gun_index[# near_chalk.gid, gun_stat.mag_size]
                current_wep = 1
            }
            else
            {
                wep[current_wep] = near_chalk.gid
                ammo[current_wep] = global.gun_index[# near_chalk.gid, gun_stat.max_ammo]
                mag[current_wep] = global.gun_index[# near_chalk.gid, gun_stat.mag_size]
            }
        }
    }
    if(point_distance(x,y,near_barricade.x,near_barricade.y) &lt; 96)
    {
        repairing = true
    }
}

if(point_distance(x,y,near_barricade.x,near_barricade.y) &gt; 96)
{
    repairing = false
    repair_time = 0
} 

if(repairing = true and point_distance(x,y,near_barricade.x,near_barricade.y) &lt; 96 and near_barricade.hp &lt; 5)
{
    repair_time++
    if(repair_time = 30)
    {
        audio_play_sound(money_sound, 1, 0)
        near_barricade.hp++
        points += 10
        with(instance_create(1675, 900,  point_text)) val = 10
        repair_time = 0
    }
}

if(swap_key and !reloading and wep[1] != gun.none)
{
    if(current_wep = 1) current_wep = 0
    else current_wep = 1
}

if(sprint_juice &lt;= 0)
{
    sprint_cooldown = true
}

if(sprint_juice = sprint_max) sprint_cooldown = false

if(!sprint_key and sprint_juice &lt; sprint_max) sprint_juice++

if(!right_key and !left_key and !up_key and !down_key) moving = false

if(end_key) game_end()

if(shoot_key and shoot_cooldown = 0 and !sprint_key)
{
    if(mag[current_wep] &gt; 0)
    {
        if(wep[current_wep] = gun.boomstick)
        {
            repeat(12)
            {
                with(instance_create(x,y,bullet))
                {
                    if(player.aim_key) 
                    {
                        dir = point_direction(x,y,mouse_x,mouse_y) + (irandom(player.gun_accuracy/3) * choose(1,-1))
                        aimed = true
                    }
                    else 
                    {
                        aimed = false
                        dir = point_direction(x,y,mouse_x,mouse_y) + (irandom(player.gun_accuracy) * choose(1,-1))
                    }
                    image_angle = dir
                    damage = player.gun_damage
                    crit = player.gun_crit
                    velocity = irandom(12) + 12
                }
            }
            shoot_cooldown = gun_rof
            mag[current_wep]--
            audio_play_sound(gun_sound, 1, 0)
        }
        else if(wep[current_wep] = gun.trenchgun)
        {
            repeat(8)
            {
                with(instance_create(x,y,bullet))
                {
                    if(player.aim_key) 
                    {
                        dir = point_direction(x,y,mouse_x,mouse_y) + (irandom(player.gun_accuracy/3) * choose(1,-1))
                        aimed = true
                    }
                    else 
                    {
                        aimed = false
                        dir = point_direction(x,y,mouse_x,mouse_y) + (irandom(player.gun_accuracy) * choose(1,-1))
                    }
                    image_angle = dir
                    damage = player.gun_damage
                    crit = player.gun_crit
                    velocity = irandom(12) + 12
                }
            }
            shoot_cooldown = gun_rof
            mag[current_wep]--
            audio_play_sound(gun_sound, 1, 0)
        }
        else
        {
            with(instance_create(x,y,bullet))
            {
                if(player.aim_key) 
                {
                    dir = point_direction(x,y,mouse_x,mouse_y) + (irandom(player.gun_accuracy/3) * choose(1,-1))
                    aimed = true
                }
                else 
                {
                    aimed = false
                    dir = point_direction(x,y,mouse_x,mouse_y) + (irandom(player.gun_accuracy) * choose(1,-1))
                }
                image_angle = dir
                damage = player.gun_damage
                crit = player.gun_crit
            }
            shoot_cooldown = gun_rof
            mag[current_wep]--
            audio_play_sound(gun_sound, 1, 0)
        }
    }
    else
    {
        audio_play_sound(reload, 1, 0)
        reloading = true
        shoot_cooldown = (gun_reload+1)
    }
}
if(reload_key and mag[current_wep] &lt; gun_mag_size and ammo[current_wep] &gt; 0)
{
        audio_play_sound(reload, 1, 0)
        reloading = true
        shoot_cooldown = (gun_reload+1)
}


if(shoot_cooldown &gt; 0) shoot_cooldown--

if(shoot_cooldown = 1 and reloading = true)
{
    if(ammo[current_wep] &gt; 0)
    {
        ammo_restored = (gun_mag_size-mag[current_wep])
        if(ammo[current_wep]-ammo_restored &gt; 0) ammo[current_wep] -= ammo_restored
        else
        {
            ammo_restored = ammo[current_wep]
            ammo[current_wep] = 0
        }
        mag[current_wep] += ammo_restored
    }
    else if(ammo[current_wep] = 0)
    {
    }
    reloading = false
}

current_zombie_pop = instance_number(zombie)

if(current_zombie_pop = 0 and zombies_spawned &gt;= max_zombie_pop and round_reprieve = 0 and hp &gt; 0)
{
    round_reprieve = 600
    audio_play_sound(round_end, 1, 0)
    with(barricade) can_spawn = false
    zombies_spawned = 0
}


if(round_reprieve &gt; 0) round_reprieve--

if(round_reprieve = 1) 
{
    audio_play_sound(round_begin, 1, 0)
    max_zombie_pop += 5
    max_zombie_pop = round(max_zombie_pop * 1.15)
    with(barricade) can_spawn = true
    rounds++
}

if(mercy_timer &gt; 0) mercy_timer--

if(hp &lt; 3 and regen &lt; 180 and hp &gt; 0)
{
    regen++
}

if(regen = 180)
{
    regen = 0
    hp++
}

if(hp &lt;= 0)
{
    with(zombie) instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(1920,1080)

if(hp &gt; 0)
{
    draw_set_color(c_white)
    draw_set_halign(fa_left)
    draw_set_font(font0)
    draw_sprite(s_scoreback,0,1670,905)
    draw_text(1675, 900, string(points))
    
    draw_set_color(c_red)
    draw_text(10, 900, "ROUND " + string(rounds))
    
    draw_set_color(c_white)
    draw_set_halign(fa_left)
    draw_set_font(ammo_font)
    draw_text(1675, 970, string(gun_name) + "#" + string(mag[current_wep]) + "/" + string(ammo[current_wep]))
}
else
{
    draw_set_color(c_black)
    draw_rectangle(0,0,1930,1090,false)
    draw_set_font(font0)
    draw_set_color(c_white)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_text(1920/2, 1080/2, "GAME OVER!##Score:" + string(total_points) + "##Kills: " + string(kills))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!moving) 
{
    image_speed = 0
    image_index = 0
}
else image_speed = 0.15

draw_set_color(c_black)
draw_set_alpha(0.1)
draw_ellipse(x-18,y+12,x+14,y+20,false)
draw_set_alpha(1)

if(mouse_x &lt;= x)
{
    image_xscale = -1   
}
else image_xscale = 1

if(aim_key and !sprint_key) cursor_sprite = s_aim_crosshair
else cursor_sprite = s_crosshair

if(sprint_juice &lt; sprint_max)
{
    draw_sprite_ext(s_sprint_meter, 0, x-32,y+34,(sprint_juice/sprint_max),1,0,c_white,1)
}

if(point_distance(x,y,near_door.x,near_door.y) &lt;= 96)
{
    draw_set_font(ammo_font)
    draw_set_halign(fa_center)
    draw_set_color(c_white)
    draw_text(x, y-128, "Cost: " + string(instance_nearest(player.x,player.y,door).cost) + "#Press [E] to open.")
}

if(point_distance(x,y,near_chalk.x,near_chalk.y) &lt;= 96)
{
    draw_set_font(ammo_font)
    draw_set_halign(fa_center)
    draw_set_color(c_white)
    draw_text(x, y-128, "Cost: " + string(near_chalk.cost) + "#Press [E] to buy " + string(global.gun_index[# near_chalk.gid, gun_stat.name]) + ".")
}
if(point_distance(x,y,near_barricade.x,near_barricade.y) &lt;= 96 and near_barricade.hp &lt; 5)
{
    draw_set_font(ammo_font)
    draw_set_halign(fa_center)
    draw_set_color(c_white)
    draw_text(x, y-128, "Press [E] to start repairing.")
}

if(hp &lt; 3 and hp &gt; 0)
{
    for(i = 0; i &lt; hp; i++)
    {
        draw_sprite(s_hp_bar, 0, x-((i+1)*16),y-64)
    }
}

if(mercy_timer = 0 or mercy_timer%2 = 0) draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
